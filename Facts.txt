In spring boot, I learned about:
    1. How Tomcat is embedded in Spring Boot application?
    Spring Boot is built on top of the Spring framework and it includes an embedded Tomcat server by default,
    which allows developers to run Spring Boot applications as standalone applications.
    The embedded Tomcat server can be turned off using the following configuration property: spring.main.web-application-type=none.

    2. @SpringBootApplication annotation
    The @SpringBootApplication annotation is a combination of three annotations:
    @Configuration, @EnableAutoConfiguration, and @ComponentScan.
    It is a convenient way to enable the most commonly used Spring Boot features in a single annotation.

    3. @EnableAutoConfiguration:
    EnableAutoConfiguration is an annotation that tells Spring Boot to automatically configure the application based on the
    dependencies that are present on the classpath. It scans the classpath for libraries and frameworks and configures them
    automatically so that the application can use them without any additional configuration. This annotation is usually added
    to the main class of the application.

    4. @Configuration:
    The Configuration annotation is used to define a configuration class that provides configuration for the application.
    Configuration classes contain methods that create beans and configure them. These methods are annotated with @Bean,
    which tells Spring that the method should be used to create a bean. Configuration classes can be used to configure
    third-party libraries or to create custom beans that the application needs.

    5. @ComponentScan:
    ComponentScan is an annotation that tells Spring to scan the package and its sub-packages for classes that are annotated
    with Spring annotations, such as @Component, @Service, @Repository, or @Controller. These classes are automatically
    registered as beans in the Spring application context, which makes them available for use throughout the application.
    ComponentScan is usually added to the main class of the application.

    6. @RestController annotation
    The @RestController annotation is used to create RESTful web services in Spring Boot.
    It is a convenience annotation that combines the functionality of both @Controller and @ResponseBody annotations.

    7. @RequestMapping annotation
    The @RequestMapping annotation is used to map web requests to Spring Controller methods.
    It can be used to specify the HTTP method, URL path, and other request parameters for a method.

    8. @RequestBody annotation
    The @RequestBody annotation is used to bind the HTTP request body with a domain object in a method parameter or return type.
    It is typically used in conjunction with the @PostMapping and @PutMapping annotations.

    9. record in Java 14
    A record is a new class introduced in Java 14 that provides a concise way to create a class with getters,
    setters, equals, hashCode, and toString methods.
    It is a compact alternative to traditional Java classes and can be used to represent data objects.

    10. @SequenceGenerator annotation
    The @SequenceGenerator annotation is used to generate a sequence of numbers for a primary key column in a database table.
    It is typically used in conjunction with the @GeneratedValue annotation.

    11. @GeneratedValue annotation
    The @GeneratedValue annotation is used to specify the primary key generation strategy for an entity in JPA (Java Persistence API).
    It can be used with different strategies such as AUTO, IDENTITY, and SEQUENCE.

    12. @Controller annotation
    It creates a bean which is typically used to handle HTTP requests in a Spring MVC application.

I also learned about:
    1. In Java, it is a convention to use a package name in lowercase letters and without any underscores, hyphens, or spaces.
       Following this convention helps to avoid naming conflicts and makes it easier for other developers to read and understand
       your code.

    2. The @Component annotation is used to mark a Java class as a bean so that it can be managed by the Spring container.
       It creates a bean which is singleton by default.
       The value attribute of the annotation can be used to specify a name for the bean. For example,
       @Component(value = "myBean") creates a bean with the name "myBean". This is useful when you want to create multiple
       beans of the same type and need to differentiate them based on their names.

    3. The @Qualifier annotation is used to resolve the conflict when multiple beans of the same type are available in the
       Spring container. For example, suppose you have two beans of type "Person", named "personA" and "personB".
       You can use the @Qualifier annotation to specify which bean to use in a specific situation. For example,
       @Autowired @Qualifier("personA") Person person; would inject the "personA" bean into the "person" variable.

    4. The @Primary annotation is used to tell Spring which bean to use when multiple candidates are available.
       This is useful when you have multiple implementations of the same interface and want to use one of them as the primary bean.
       For example, suppose you have two beans of type "DataSource", named "dataSourceA" and "dataSourceB".
       You can use the @Primary annotation to specify that "dataSourceA" should be the primary bean. For example, @Primary @Bean
       public DataSource dataSourceA() { ... } would create a bean with the name "dataSourceA" and mark it as the primary bean.

    5. @Bean annotation
       The @Bean annotation is used to mark a method as a bean definition method. It is typically used in conjunction with
       the @Configuration annotation to create beans in a Spring application context. For example, @Configuration @Bean
       public DataSource dataSource() { ... } would create a bean with the name "dataSource" and return it from the method.
       It will instantiate the method. @Bean with a class already defined gives that class/interface a new definition.

    6. CommandLineRunner interface
       The CommandLineRunner interface is used to run code after the Spring application context has been initialized.
       It is typically used to perform some initialization tasks such as loading data from a database or setting up a cache.
       For example, @Component public class MyRunner implements CommandLineRunner { ... } would create a bean with the name
       "myRunner" and run the code in the run() method after the application context has been initialized.

    7. Jackson library
       The Jackson library is used to convert Java objects into JSON and vice versa. It converts Java objects with the help
       of getters. Two handy annotations are @JsonIgnore and @JsonProperty. @JsonIgnore is used to ignore a field when converting
       an object to JSON. @JsonProperty is used to specify the name of a field when converting an object to JSON also
       @JsonProperty(access = JsonProperty.Access.WRITE_ONLY) is used to specify that a field should be only to send it from
       the client and not to read from the client.

    8. POST vs PUT
       The POST method is used to create a new resource on the server. The PUT method is used to update an existing resource
       on the server. PUT is idempotent, which means that if you send the same request multiple times, it will have the same
       effect as sending it once. POST is not idempotent, which means that if you send the same request multiple times,
       it will have different effects each time.

    9. APIs
       Naming conventions for REST APIs are important because they make it easier for developers to understand how to use them.
       Examples of good naming conventions are: api/v1/users, api/v2/users, api/v1/users/{id}. Versioning is important because
       it allows you to make changes to your API without breaking existing clients. For example, if you change the response
       format from XML to JSON, you can still support clients that expect XML responses by adding a new version of the API
       that returns JSON responses. This way, you can support both XML and JSON responses without breaking existing clients.
       After versioning there usually is the model name, then the id of the model, then the action. Generally people prefer
       to @Deprecated the old version of the API and create a new one.

    10. Server side validations
        To perform server-side validation, you can use the @Valid annotation on a method parameter or return type. In the POJO
        class add @NotBlank above any field which is mandatory, can also add message attribute inside it. This comes from spring-boot-starter-validation. @Email is
        another useful annotation. @Size(min = 2, max = 100) is used to specify the minimum and maximum length of a string.

    11. Exception handling
        One way to handle exceptions in Spring Boot is to add these lines inside application.properties:
        server.error.include-message=always
        server.error.include-binding-errors=always
        server.error.include-stacktrace=always
        Another way is to create a class that extends RuntimeException and add @ResponseStatus(HttpStatus.NOT_FOUND) above it.
        Another way is to create an ApiRequestException that throws exception, ApiException that the client sees and
        ApiExceptionHandler which handles all the exception. Inside ApiExceptionHandler add @ControllerAdvice and handle
        all the Exceptions using @ExceptionHandler.

    12. data.sql and schema.sql
        data.sql is used to insert data into the database. schema.sql is used to create the tables in the database.
        Both of these files are executed automatically when the application starts up, they are stored in the resources folder.

    13. Configure to a database.
        Add @Entity and @Table(name = "table_name") above the class. Add @Id and @GeneratedValue(strategy = GenerationType.IDENTITY)

    14. OpenFeign
        OpenFeign is a declarative web service client. It is used to make HTTP requests to other services in a Spring Boot application.

    15. Logging
        Spring boot uses Logback by default. To log inside a class, add
        private static final Logger LOGGER = LoggerFactory.getLogger(ClassName.class); Then use LOGGER.info("message"); or
        LOGGER.error("message"); or LOGGER.warn("message"); or LOGGER.debug("message"); or LOGGER.trace("message");
        In application.properties certain things can be set like logging.file.name=application.log or
        logging.logback.rollingpolicy.file-name-pattern=application-%d{yyyy-MM-dd}.log.gz or logging.level.root=INFO

    16. Metrics
        Spring Boot Actuator is a sub-project of Spring Boot that adds several production-ready features to your Spring Boot
        application. One of these features is metrics. Metrics are used to monitor the health of your application. For example,
        you can use metrics to monitor the number of requests per second or the average response time of your application.
        To enable metrics, you need to add the following dependency to your pom.xml file:
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        Then you can access the metrics at /actuator/metrics/{metricName}.
        Add these in application.properties:
        info.app.name=Spring Boot Actuator
        management.endpoint.health.show-details=always
        management.endpoints.web.exposure.include=*
